SQLAlchemy_site_on_flask

Проект осуществляет запрос на hh.ru к его API.

parser_app - отправляет запроc и обрабатывает результат.
web_app - формирует ответ и выводит пользователю для просмотра.

Для проекта используем фреймворк Flask.
Использован Blueprint от flask для web_app, который прописан в web_app.__init__.py.

Для запуска создаем базу create_db и запускаем hh_flask_parser на локальном
сервере.

В flask_parser прописаны вьюшки. В process_request функции для работы с базой.
Использован sqlalchemy.orm для облегчения работы с базой sqlite.

Все работает. Файл requirements.txt не полный. Версии того что прописано
в requirement, прописаны pycharm_ом и могут не совпадать с необходимыми версиями.
Это как то связано с dependencies, пока еще не понял как.
ВАЖНО. В sqlite стало возможным(недавно, когда не знаю) писать в ячейку базы
json целиком. Здесь реализовано именно такое решение. Это упрощает работу
с запросами к базе. Парсер работает довольно быстро. Подключен модуль
multiprocessing для оптимизации и ускорения работы python интерпретатора.
Реализованы flash pop-up, шифрование паролей и применены flask_forms,
правда только для login_flask_forms.html. Нужно еще прописать для
авторизации и для обратной связи.

Недостатки и что нужно доделать:
При выполнении запроса POST на form.html нужно дописать код для чего-то
похожего на loading screen, чтобы пользователь ждал окончания выполнения
запроса и не жал на кнопку 'посмотреть результат' сразу. Также нужно решить
вопрос с обновлением страниц. Понять почему не обновляются некоторые или все???
Также не хватает view и template history.html который будет выводить все результаты
запросов для просмотра. Это реализуется с помощью flask_table и класса
class ItemTable(Table): который еще не прописан.
Также еще один момент который нужно исправить - при задании параметров поиска
указание региона поиска(напр. петербург) является обязательным. Сделать так,
чтобы этот момент был по желанию и парсер не выдавал ошибку. Но это не сложно.
Так же реализовать возможность обратной связи и возможности отправки мейлов
пользователем.

А так все работает. Регистрация и авторизация. Выход и вход пользователя.
Замена кнопки вход на id пользователя прописана в form.html.
Pycharm почему-то ругался на не установленный wtforms.validators. Лучше устанавливать
через pip install.
Также этот проект начинался на python 3.9 и завершен на 3.10. Были небольшие
танцы при добавлении venv.